workflows:
  android-release-build:
    name: Android Release Build
    instance_type: mac_mini_m1
    environment:
      java: 17
      flutter: stable
      groups:
        - android_signing   # CM_KEYSTORE, CM_KEYSTORE_PASSWORD, CM_KEY_PASSWORD, CM_KEY_ALIAS
      # (Las env vars GOOGLE_SERVICES_JSON_B64, FIREBASE_API_KEY_ANDROID y FIREBASE_APP_ID_ANDROID
      #  se cargan en la UI de Codemagic -> Environment variables)
    scripts:
      - name: Restore google-services.json
        script: |
          if [ -z "$GOOGLE_SERVICES_JSON_B64" ]; then
            echo "ERROR: Falta GOOGLE_SERVICES_JSON_B64"; exit 1
          fi
          mkdir -p "$CM_BUILD_DIR/android/app"
          echo "$GOOGLE_SERVICES_JSON_B64" | base64 --decode > "$CM_BUILD_DIR/android/app/google-services.json"
          ls -l "$CM_BUILD_DIR/android/app/google-services.json"


      - name: Set up keystore
        script: |
          if [ -z "$CM_KEYSTORE" ]; then
            echo "ERROR: Falta CM_KEYSTORE (base64)"; exit 1
          fi
          echo "$CM_KEYSTORE" | base64 --decode > "$CM_BUILD_DIR/keystore.jks"

      - name: Set up key.properties
        script: |
          cat > android/key.properties <<EOF
          storeFile=$CM_BUILD_DIR/keystore.jks
          storePassword=$CM_KEYSTORE_PASSWORD
          keyPassword=$CM_KEY_PASSWORD
          keyAlias=$CM_KEY_ALIAS
          EOF
          cat android/key.properties

      - name: Set up local.properties
        script: |
          script: |
            echo "flutter.sdk=$FLUTTER_ROOT" > "$CM_BUILD_DIR/android/local.properties"
            echo "flutter.versionName=1.10.0" >> "$CM_BUILD_DIR/android/local.properties"
            echo "flutter.versionCode=13" >> "$CM_BUILD_DIR/android/local.properties"
            cat "$CM_BUILD_DIR/android/local.properties"

      - name: Set up firebase_options.dart
        script: |
          cat > lib/firebase_options.dart <<'EOF'
          import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
          import 'package:flutter/foundation.dart' show defaultTargetPlatform, TargetPlatform, kIsWeb;

          class DefaultFirebaseOptions {
            static FirebaseOptions get currentPlatform {
              if (kIsWeb) throw UnsupportedError('Web no soportado.');
              switch (defaultTargetPlatform) {
                case TargetPlatform.android: return android;
                default: throw UnsupportedError('Plataforma no soportada.');
              }
            }
            static const FirebaseOptions android = FirebaseOptions(
              apiKey: String.fromEnvironment('FIREBASE_API_KEY_ANDROID', defaultValue: ''),
              appId: String.fromEnvironment('FIREBASE_APP_ID_ANDROID', defaultValue: ''),
              messagingSenderId: '1049571319674',
              projectId: 'macavi-96e80',
              storageBucket: 'macavi-96e80.appspot.com',
            );
          }
          EOF

      - name: Fix gradlew permissions
        script: |
          chmod +x android/gradlew
          sed -i 's/\r$//' android/gradlew || true

      - name: Get packages
        script: flutter pub get

      - name: Build AAB
        script: |
          flutter build appbundle --release \
            --build-name=1.10.0 \
            --build-number=13 \
            --android-skip-build-dependency-validation \
            --dart-define=FIREBASE_API_KEY_ANDROID=$FIREBASE_API_KEY_ANDROID \
            --dart-define=FIREBASE_APP_ID_ANDROID=$FIREBASE_APP_ID_ANDROID

    artifacts:
      - build/app/outputs/bundle/release/*.aab
      - build/**/outputs/**/mapping.txt
